<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "spring-beans.dtd"  >
<beans>
    <!-- 
        Please make sure the following properties are availabe to the context
        com.smartitengineering.dao.connection.driver_class
        com.smartitengineering.dao.connection.url
        com.smartitengineering.dao.connection.username
        com.smartitengineering.dao.connection.password
        com.smartitengineering.dao.dialect
        com.smartitengineering.dao.show_sql
    -->
    <bean id="propertyConfigurer" class="com.smartitengineering.util.spring.PropertiesLocatorConfigurer">
        <property name="smartLocations">
            <list>
                <value>db-config.properties</value>
            </list>
        </property>
        <property name="properties" >
            <props>
                <prop key="hibernate.connection.driver_class">${com.smartitengineering.dao.connection.driver_class}
                </prop>
                <prop key="hibernate.connection.url">${com.smartitengineering.dao.connection.url}
                </prop>
                <prop key="hibernate.connection.username">${com.smartitengineering.dao.connection.username}
                </prop>
                <prop key="hibernate.connection.password">${com.smartitengineering.dao.connection.password}
                </prop>
                <prop key="hibernate.dialect">${com.smartitengineering.dao.dialect}
                </prop>
                <prop key="hibernate.show_sql">${com.smartitengineering.dao.show_sql}
                </prop>
            </props>
        </property>
    </bean>

    <!-- Local C3P0 DataSource that works in any environment -->
    <!-- (Both DataSource implementations have a "close" method to be called on shutdown) -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass">
            <value>${hibernate.connection.driver_class}</value>
        </property>
        <property name="jdbcUrl">
            <value>${hibernate.connection.url}</value>
        </property>
        <property name="user">
            <value>${hibernate.connection.username}</value>
        </property>
        <property name="password">
            <value>${hibernate.connection.password}</value>
        </property>
        <property name="acquireIncrement">
            <value>5</value>
        </property>
        <property name="checkoutTimeout">
            <value>5000</value>
        </property>
        <property name="initialPoolSize">
            <value>5</value>
        </property>
        <property name="maxIdleTime">
            <value>120</value>
        </property>
        <!-- Will never expire (seconds)-->
        <property name="maxPoolSize">
            <value>30</value>
        </property>
        <property name="maxStatements">
            <value>500</value>
        </property>
        <property name="maxStatementsPerConnection">
            <value>12</value>
        </property>
        <property name="minPoolSize">
            <value>3</value>
        </property>
        <property name="numHelperThreads">
            <value>4</value>
        </property>
    </bean>
    
    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref local="dataSource" />
        </property>
        <property name="mappingResources">
            <list>
                <value>hbm/BasicIdentity.hbm.xml</value>
                <value>hbm/Privilege.hbm.xml</value>
                <value>hbm/Role.hbm.xml</value>
                <value>hbm/User.hbm.xml</value>
                <value>hbm/UserPerson.hbm.xml</value>
                <value>hbm/Person.hbm.xml</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}
                </prop>
                <prop key="hibernate.autoCommit">true
                </prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}
                </prop>
                <prop key="hibernate.hbm2ddl.auto">create-drop
                </prop>
                <prop key="hibernate.query.substitutions">true 'T', false 'F'
                </prop>
            </props>
        </property>
    </bean>
    <bean id="abstractDao" class="com.smartitengineering.dao.impl.hibernate.AbstractCommonDaoImpl" abstract="true">
        <property name="sessionFactory">
            <ref local="sessionFactory" />
        </property>
    </bean>
    <bean id="personDao" class="com.smartitengineering.user.dao.PersonDaoImpl" parent="abstractDao"/>
    <bean id="basicIdentityReadDao" class="com.smartitengineering.user.dao.BasicIdentityDaoImpl" parent="abstractDao"/>
    <bean id="userDao" class="com.smartitengineering.user.dao.UserDaoImpl" parent="abstractDao"/>
    <bean id="userPersonDao" class="com.smartitengineering.user.dao.UserPersonDaoImpl" parent="abstractDao"/>
    <bean id="roleDao" class="com.smartitengineering.user.dao.RoleDaoImpl" parent="abstractDao"/>
    <bean id="privilegeDao" class="com.smartitengineering.user.dao.PrivilegeDaoImpl" parent="abstractDao"/>
    <bean id="personServiceTarget" class="com.smartitengineering.user.impl.PersonServiceImpl">
        <property name="personReadDao">
            <ref local="personDao" />
        </property>
        <property name="personWriteDao">
            <ref local="personDao" />
        </property>
        <property name="basicIdentityReadDao">
            <ref local="basicIdentityReadDao" />
        </property>
    </bean>
    <bean id="userServiceTarget" class="com.smartitengineering.user.impl.UserServiceImpl">
        <property name="userReadDao">
            <ref local="userDao" />
        </property>
        <property name="userWriteDao">
            <ref local="userDao" />
        </property>
        <property name="roleReadDao">
            <ref local="roleDao" />
        </property>
        <property name="roleWriteDao">
            <ref local="roleDao" />
        </property>
        <property name="privilegeReadDao">
            <ref local="privilegeDao" />
        </property>
        <property name="privilegeWriteDao">
            <ref local="privilegeDao" />
        </property>
        <property name="personService">
            <ref local="personService" />
        </property>
    </bean>
    <bean id="userPersonService" class="com.smartitengineering.user.impl.UserPersonServiceImpl">
        <property name="personService">
            <ref local="personService" />
        </property>
        <property name="userService">
            <ref local="userService" />
        </property>
        <property name="userPersonReadDao">
            <ref local="userPersonDao" />
        </property>
        <property name="userPersonWriteDao">
            <ref local="userPersonDao" />
        </property>
    </bean>
    
    <bean id="personDeleteAdvice" class="com.smartitengineering.user.advice.PersonDeleteAdvice">
        <property name="userPersonService">
            <ref local="userPersonService"/>
        </property>
    </bean>
    <bean id="personDeleteAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="personDeleteAdvice"/>
        <property name="pattern" value=".*PersonServiceImpl.delete" />
    </bean>
    <bean id="personService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="personServiceTarget" />
        <property name="interceptorNames" value="personDeleteAdvisor" />
    </bean>
    
    <bean id="userDeleteAdvice" class="com.smartitengineering.user.advice.UserDeleteAdvice">
        <property name="userPersonService">
            <ref local="userPersonService"/>
        </property>
    </bean>
    <bean id="userDeleteAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="userDeleteAdvice"/>
        <property name="pattern" value=".*UserServiceImpl.delete" />
    </bean>
    <bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="userServiceTarget" />
        <property name="interceptorNames" value="userDeleteAdvisor" />
    </bean>
    <!-- **************************************************************** -->
    <!-- ******************** Initialize Roles ************************** -->
    <!-- **************************************************************** -->
    <bean id="initialRoleFactory" class="com.smartitengineering.user.server.InitialRoleFactory">
        <property name="privilegeService">
            <ref local="userService"/>
        </property>
    </bean>
    <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="initialRoleFactory"/>
        <property name="targetMethod" value="intialPrivileges" />
    </bean>
    <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="jobDetail" />
        <property name="startDelay" value="500" />
        <property name="repeatInterval" value="500" />
        <property name="repeatCount" value="0" />
    </bean>
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="simpleTrigger" />
            </list>
        </property>
    </bean>
    <!-- **************************************************************** -->
    <!-- ********************* Smart Util Reg *************************** -->
    <!-- **************************************************************** -->
    <bean id="beanRegistrar" class="com.smartitengineering.util.spring.BeanFactoryRegistrar">
        <property name="beanFactoryContextName">
            <value>userServiceContext</value>
        </property>
    </bean>
    
</beans>
